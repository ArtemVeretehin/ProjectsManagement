@using ProjectsManagement.Models;
@model List<Project>;
@{
}

<style>
    .selected {
        background: silver;
    }
</style>

<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Сотрудники компании</title>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <link rel="stylesheet" href="~/css/Table.css" />
</head>



<body>
    <input type="hidden" id="ProjectId" />


    <div class="button">
        <a href="#" id="open_popup">Создать проект</a>
    </div>
    <div class="button">
        <a href="#" id="open_FilterSettings_popup">Настройки фильтрации</a>
    </div>

    @Html.ActionLink("Сбросить настройки фильтрации","ProjectsScreen", new { sortOrder = ""})

    <div>
        Тип сортировки: @ViewBag.sortType
    </div>


    <!--Блок ниже - попап для ввода данных о проекте-->
    <div class="popup" id="prjEditPopup">
        <div class="popup_container">
            <div class="popup_body" id="prjEditPopup_body">
                <p>Оставить заказ</p>
                <form action="">
                    <input id="Title" type="text" placeholder="Название" />
                    <input id="CustomerCompany_Title" type="text" placeholder="Компания - Заказчик" />
                    <input id="ExecutorCompany_Title" type="text" placeholder="Компания - Исполнитель" />
                    <input id="DtStart" type="date">
                    <input id="DtEnd" type="date">
                    <input id="Priority" type="number" placeholder="Приоритет" />
                    <button type="button" id="AddBtn">Сохранить</button>
                    <button type="button" id="DeleteButton">Удалить</button>
                </form>
                <div class="popup_close" id="prjEditPopup_close">X</div>
            </div>
        </div>
    </div>
    <!---->

    <table>
        <thead>
            <tr>
                <th>№</th>
                <th>
                    @Html.ActionLink("Название","ProjectsScreen", 
                    new { 
                        sortOrder = ViewBag.ProjectNameSortParam, 

                        ProjectTitleFilter = ViewBag.Filter.ProjectTitleFilter,
                        CustomerTitleFilter = ViewBag.Filter.CustomerTitleFilter,
                        ExecutorTitleFilter = ViewBag.Filter.ExecutorTitleFilter,
                        DtStartLeftFilter = ViewBag.Filter.DtStartLeftFilter,
                        DtStartRightFilter = ViewBag.Filter.DtStartRightFilter,
                        DtEndLeftFilter = ViewBag.Filter.DtEndLeftFilter,
                        DtEndRightFilter = ViewBag.Filter.DtEndRightFilter,
                        PriorityLeftFilter = ViewBag.Filter.PriorityLeftFilter,
                        PriorityRightFilter = ViewBag.Filter.PriorityRightFilter

                    })
                </th>
                <th>
                    @Html.ActionLink("Компания - заказчик","ProjectsScreen", new { 
                        sortOrder = ViewBag.CustomerNameSortParam, 

                        ProjectTitleFilter = ViewBag.Filter.ProjectTitleFilter,
                        CustomerTitleFilter = ViewBag.Filter.CustomerTitleFilter,
                        ExecutorTitleFilter = ViewBag.Filter.ExecutorTitleFilter,
                        DtStartLeftFilter = ViewBag.Filter.DtStartLeftFilter,
                        DtStartRightFilter = ViewBag.Filter.DtStartRightFilter,
                        DtEndLeftFilter = ViewBag.Filter.DtEndLeftFilter,
                        DtEndRightFilter = ViewBag.Filter.DtEndRightFilter,
                        PriorityLeftFilter = ViewBag.Filter.PriorityLeftFilter,
                        PriorityRightFilter = ViewBag.Filter.PriorityRightFilter

                    })
                </th>
                <th>
                    @Html.ActionLink("Компания - Исполнитель","ProjectsScreen", new { 
                        sortOrder = ViewBag.ExecutorNameSortParam, 

                        ProjectTitleFilter = ViewBag.Filter.ProjectTitleFilter,
                        CustomerTitleFilter = ViewBag.Filter.CustomerTitleFilter,
                        ExecutorTitleFilter = ViewBag.Filter.ExecutorTitleFilter,
                        DtStartLeftFilter = ViewBag.Filter.DtStartLeftFilter,
                        DtStartRightFilter = ViewBag.Filter.DtStartRightFilter,
                        DtEndLeftFilter = ViewBag.Filter.DtEndLeftFilter,
                        DtEndRightFilter = ViewBag.Filter.DtEndRightFilter,
                        PriorityLeftFilter = ViewBag.Filter.PriorityLeftFilter,
                        PriorityRightFilter = ViewBag.Filter.PriorityRightFilter

                    })
                </th>
                <th>
                    @Html.ActionLink("Сотрудники проекта","ProjectsScreen", new { sortOrder = ViewBag.CustomerNameSortParam})
                </th>
                <th>
                    @Html.ActionLink("Руководитель проекта","ProjectsScreen", new { 
                        sortOrder = ViewBag.LeadNameSortParam, 

                        ProjectTitleFilter = ViewBag.Filter.ProjectTitleFilter,
                        CustomerTitleFilter = ViewBag.Filter.CustomerTitleFilter,
                        ExecutorTitleFilter = ViewBag.Filter.ExecutorTitleFilter,
                        DtStartLeftFilter = ViewBag.Filter.DtStartLeftFilter,
                        DtStartRightFilter = ViewBag.Filter.DtStartRightFilter,
                        DtEndLeftFilter = ViewBag.Filter.DtEndLeftFilter,
                        DtEndRightFilter = ViewBag.Filter.DtEndRightFilter,
                        PriorityLeftFilter = ViewBag.Filter.PriorityLeftFilter,
                        PriorityRightFilter = ViewBag.Filter.PriorityRightFilter

                    })
                </th>
                <th>
                    @Html.ActionLink("Дата начала","ProjectsScreen", new { 
                        sortOrder = ViewBag.DtStartSortParam, 

                        ProjectTitleFilter = ViewBag.Filter.ProjectTitleFilter,
                        CustomerTitleFilter = ViewBag.Filter.CustomerTitleFilter,
                        ExecutorTitleFilter = ViewBag.Filter.ExecutorTitleFilter,
                        DtStartLeftFilter = ViewBag.Filter.DtStartLeftFilter,
                        DtStartRightFilter = ViewBag.Filter.DtStartRightFilter,
                        DtEndLeftFilter = ViewBag.Filter.DtEndLeftFilter,
                        DtEndRightFilter = ViewBag.Filter.DtEndRightFilter,
                        PriorityLeftFilter = ViewBag.Filter.PriorityLeftFilter,
                        PriorityRightFilter = ViewBag.Filter.PriorityRightFilter

                    })
                </th>
                <th>
                    @Html.ActionLink("Дата окончания","ProjectsScreen", new { 
                        sortOrder = ViewBag.DtEndSortParam, 

                        ProjectTitleFilter = ViewBag.Filter.ProjectTitleFilter,
                        CustomerTitleFilter = ViewBag.Filter.CustomerTitleFilter,
                        ExecutorTitleFilter = ViewBag.Filter.ExecutorTitleFilter,
                        DtStartLeftFilter = ViewBag.Filter.DtStartLeftFilter,
                        DtStartRightFilter = ViewBag.Filter.DtStartRightFilter,
                        DtEndLeftFilter = ViewBag.Filter.DtEndLeftFilter,
                        DtEndRightFilter = ViewBag.Filter.DtEndRightFilter,
                        PriorityLeftFilter = ViewBag.Filter.PriorityLeftFilter,
                        PriorityRightFilter = ViewBag.Filter.PriorityRightFilter

                    })
                </th>
                <th>
                    @Html.ActionLink("Приоритет","ProjectsScreen", new { 
                        sortOrder = ViewBag.PrioritySortParam, 

                        ProjectTitleFilter = ViewBag.Filter.ProjectTitleFilter,
                        CustomerTitleFilter = ViewBag.Filter.CustomerTitleFilter,
                        ExecutorTitleFilter = ViewBag.Filter.ExecutorTitleFilter,
                        DtStartLeftFilter = ViewBag.Filter.DtStartLeftFilter,
                        DtStartRightFilter = ViewBag.Filter.DtStartRightFilter,
                        DtEndLeftFilter = ViewBag.Filter.DtEndLeftFilter,
                        DtEndRightFilter = ViewBag.Filter.DtEndRightFilter,
                        PriorityLeftFilter = ViewBag.Filter.PriorityLeftFilter,
                        PriorityRightFilter = ViewBag.Filter.PriorityRightFilter

                    })
                </th>
            </tr>
        </thead>

        <tbody>
            @for (int i = 0; i < Model.Count; i++)
            {
                string DtStartToString = "";
                string DtEndToString = "";
                @if (Model[i].DtStart is not null)
                {
                    DtStartToString = @Model[i].DtStart.Value.ToString("yyyy-MM-dd");
                }

                @if (Model[i].DtEnd is not null)
                {
                    DtEndToString = @Model[i].DtEnd.Value.ToString("yyyy-MM-dd");
                }


                string getProjectArgument = $"{Model[i].Id},'{Model[i].Title}','{Model[i].CustomerCompany_Title}','{Model[i].ExecutorCompany_Title}','{DtStartToString}','{DtEndToString}','{Model[i].Priority}'";
                <tr id=@($"prjRecord{Model[i].Id}") onclick="getProject(@getProjectArgument)">
                    <td>@(i + 1)</td>
                    <td>@Model[i].Title</td>
                    <td>@Model[i].CustomerCompany_Title</td>
                    <td>@Model[i].ExecutorCompany_Title</td>
                    <td>
                        @foreach (var employee in Model[i].Employees)
                        {
                            @employee.FirstName @employee.SurName @employee.LastName
                            <br>
                        }
                        <div class="button">
                            <a href="#" id=@($"open_employee_popup{Model[i].Id}") onclick="loadEmployeePopup(event,@Model[i].Id, false)">Добавить</a>
                            <a href="#" id=@($"open_employeeDelete_popup{Model[i].Id}") onclick="loadEmployeePopup(event,@Model[i].Id, false)">Удалить</a>
                        </div>
                    </td>
                    <td>
                        @Model[i].Employees.Where(employee => employee.Id == @Model[i].LeadEmployeeId).Select(employee => $"{$"{employee.FirstName} {employee.SurName} {employee.LastName}"}").FirstOrDefault()

                        <div class="button">
                            <a href="#" id=@($"open_leadChange_popup{Model[i].Id}") onclick="loadEmployeePopup(event,@Model[i].Id, true)">Выбрать руководителя</a>
                        </div>
                    </td>


                    @if (Model[i].DtStart is null)
                    {
                        <td></td>
                    }
                    else
                    {
                        <td>@Model[i].DtStart.Value.ToString("dd-MM-yyyy")</td>
                    }

                    @if (Model[i].DtEnd is null)
                    {
                        <td></td>
                    }
                    else
                    {
                        <td>@Model[i].DtEnd.Value.ToString("dd-MM-yyyy")</td>
                    }



                    <td>@Model[i].Priority</td>
                </tr>
            }
        </tbody>
    </table>

    <div id="partialZone">
    </div>

</body>

</html>




<script>

    //Открытие попапа с сотрудниками
    function loadEmployeePopup(e, ProjectId, isLeadConfiguration) {
        e.preventDefault();

        if (e.target.id.includes("open_employee_popup")) {
            $("#partialZone").load("/Project/EmployeesAddToPrjView", { ProjectId: ProjectId }, () => {
                document.getElementById('employee_popup').classList.add('active');
            });
        }

        if (e.target.id.includes("open_employeeDelete_popup")) {
            $("#partialZone").load("/Project/EmployeesDeleteFromPrjView", { ProjectId: ProjectId }, () => {
                document.getElementById('employee_popup').classList.add('active');
            });
        }

        if (e.target.id.includes("open_leadChange_popup")) {
            $("#partialZone").load("/Project/EmployeesPrjLeadChangeView", { ProjectId: ProjectId }, () => {
                document.getElementById('employee_popup').classList.add('active');
            });
        }
    }


    //Добавление данных проекта в БД
    function Add(Title, CustomerCompany_Title, ExecutorCompany_Title, DtStart, DtEnd, Priority) {
        $.ajax({
            url: '/Project/Add',
            type: 'POST',
            async: false,
            data: { Title: Title, CustomerCompany_Title: CustomerCompany_Title, ExecutorCompany_Title: ExecutorCompany_Title, DtStart: DtStart, DtEnd: DtEnd, Priority: Priority },
            success: function(data) {
                location.reload()
            }
        });
    }


    //Добавление данных проекта в БД
    function Edit(Id, Title, CustomerCompany_Title, ExecutorCompany_Title, DtStart, DtEnd, Priority) {
        console.log("Add Begin");
        $.ajax({
            url: '/Project/Edit',
            type: 'POST',
            async: false,
            data: { Id: Id, Title: Title, CustomerCompany_Title: CustomerCompany_Title, ExecutorCompany_Title: ExecutorCompany_Title, DtStart: DtStart, DtEnd: DtEnd, Priority: Priority },
            success: function(data) {
                location.reload()
            }
        });
    }


    //Удаление данных выбранного проекта в БД
    function Delete(Id) {
        console.log("Add Begin");
        $.ajax({
            url: '/Project/Delete',
            type: 'POST',
            async: false,
            data: { Id: Id },
            success: function(data) {
                location.reload()
            }
        });
    }





    //Получение данных выбранного проекта (для отображения в попапе)
    function getProject(Id, Title, CustomerCompany_Title, ExecutorCompany_Title, DtStart, DtEnd, Priority) {
        console.log("getProject Begin");

        if ((event.target.id.includes("open_leadChange_popup")) || (event.target.id.includes("open_employeeDelete_popup")) || (event.target.id.includes("open_employee_popup"))) {
            document.getElementById("ProjectId").value = Id;
        }
        else {
            document.getElementById("ProjectId").value = Id;
            document.getElementById("Title").value = Title;
            document.getElementById("CustomerCompany_Title").value = CustomerCompany_Title;
            document.getElementById("ExecutorCompany_Title").value = ExecutorCompany_Title;
            document.getElementById("DtStart").value = DtStart;
            document.getElementById("DtEnd").value = DtEnd;
            document.getElementById("Priority").value = Priority;
            document.getElementById('prjEditPopup').classList.add('active');
        }
    }


    //Обработчик событий для кнопки сохранить в попапе проекта
    document.getElementById("AddBtn").addEventListener("click", async () => {
        const Id = document.getElementById("ProjectId").value;
        const Title = document.getElementById("Title").value;
        const CustomerCompany_Title = document.getElementById("CustomerCompany_Title").value;
        const ExecutorCompany_Title = document.getElementById("ExecutorCompany_Title").value;
        const DtStart = document.getElementById("DtStart").value;
        const DtEnd = document.getElementById("DtEnd").value;
        const Priority = document.getElementById("Priority").value;


        document.getElementById("ProjectId").value = "";

        if (Id === "") {
            await Add(Title, CustomerCompany_Title, ExecutorCompany_Title, DtStart, DtEnd, Priority);
        }
        else {
            await Edit(Id, Title, CustomerCompany_Title, ExecutorCompany_Title, DtStart, DtEnd, Priority);
        }

    });


    //Обработчик события для кнопки удалить в попапе проекта
    document.getElementById("DeleteButton").addEventListener("click", async () => {
        const Id = document.getElementById("ProjectId").value;
        await Delete(Id);
    })


    //Обработчик события для открытия попапа проекта
    document.getElementById('open_popup').addEventListener('click', function(e) {
        e.preventDefault();
        document.getElementById('prjEditPopup').classList.add('active');
    })

    //Обработчик события для открытия попапа настроек фильтрации
    document.getElementById('open_FilterSettings_popup').addEventListener('click', function(e) {
        e.preventDefault();

        $("#partialZone").load("/Project/ProjectsFiltrationSettingsView", () => {
            document.getElementById('FilterSettings_popup').classList.add('active');
        })
    })


    //Обработчик события для кнопки закрытия попапа проекта
    document.getElementById('prjEditPopup_close').addEventListener('click', () => {
        document.getElementById('prjEditPopup').classList.remove('active');
        document.getElementById("ProjectId").value = "";
        document.getElementById("Title").value = "";
        document.getElementById("CustomerCompany_Title").value = "";
        document.getElementById("ExecutorCompany_Title").value = "";
        document.getElementById("DtStart").value = "";
        document.getElementById("DtEnd").value = "";
        document.getElementById("Priority").value = "";
    })


</script>



